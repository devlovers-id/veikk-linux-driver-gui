#include "veikkconfig.h"
#include "ui_main.h"
#include "qpressurecurvescene.h"
#include "qscreenmapscene.h"
#include <QScreen>
#include <QGuiApplication>
#include <QFile>
#include <QDebug>

// set up widgets, hook up handlers
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow{parent}, ui{new Ui::MainWindow} {
    qint8 i;

    // basic ui setup (auto-generated by qt designer)
    ui->setupUi(this);

    screen = QGuiApplication::screens().first();
    connect(screen, &QScreen::geometryChanged,
            this, &MainWindow::screenSizeChanged);

    tabWidget = findChild<QTabWidget *>("tab_widget");
    connect(tabWidget, &QTabWidget::currentChanged,
            this, &MainWindow::tabChanged);

    pressureCurveView = findChild<QGraphicsView *>("pressure_curve_view");
    pressureCurveView->setScene(new QPressureCurveScene{});
    pressureCurveView->scale(1, -1);
    connect(static_cast<QPressureCurveScene *>(pressureCurveView->scene()),
            &QPressureCurveScene::updatePressureForm,
            this, &MainWindow::updatePressureForm);
    connect(this, &MainWindow::updatePressureCurve,
            static_cast<QPressureCurveScene *>(pressureCurveView->scene()),
            &QPressureCurveScene::updatePressureCurve);

    screenMapView = findChild<QGraphicsView *>("screen_map_view");
    screenMapView->setScene(new QScreenMapScene{screen});
    connect(static_cast<QScreenMapScene *>(screenMapView->scene()),
            &QScreenMapScene::updateScreenMapForm,
            this, &MainWindow::updateScreenMapForm);
    connect(this, &MainWindow::updateScreenMapRect,
            static_cast<QScreenMapScene *>(screenMapView->scene()),
            &QScreenMapScene::updateScreenMapRect);

    for(i=0; i<4; i++) {
        pressureCoefSpinboxes[i] = findChild<QDoubleSpinBox *>
                                    ("pressure_coef_a" + QString::number(i));
        connect(pressureCoefSpinboxes[i],
                QOverload<double>::of(&QDoubleSpinBox::valueChanged),
                this, &MainWindow::updatePressureCoefs);
    }

    screenMapSpinboxes[0] = screenMapXSpinBox = findChild<QSpinBox *>
                                                    ("screen_map_x");
    screenMapSpinboxes[1] = screenMapYSpinBox = findChild<QSpinBox *>
                                                    ("screen_map_y");
    screenMapSpinboxes[2] = screenMapWidthSpinBox = findChild<QSpinBox *>
                                                    ("screen_map_width");
    screenMapSpinboxes[3] = screenMapHeightSpinBox = findChild<QSpinBox *>
                                                    ("screen_map_height");
    screenWidthLineEdit = findChild<QLineEdit *>("screen_width");
    screenHeightLineEdit = findChild<QLineEdit *>("screen_height");
    screenDefaultMap = findChild<QCheckBox *>("screen_default_map");
    connect(screenDefaultMap, &QCheckBox::stateChanged,
            this, &MainWindow::setDefaultScreenMap);
    for(i=0; i<4; i++)
        connect(screenMapSpinboxes[i], &QSpinBox::editingFinished,
                this, &MainWindow::updateScreenMapParms);
    screenSizeChanged(screen->geometry());
    updateScreenMapForm(screen->geometry());

    screenOrientation = findChild<QComboBox *>("screen_orientation");
    screenOrientation->addItem("Default");
    screenOrientation->addItem("90deg CCW");
    screenOrientation->addItem("Flipped");
    screenOrientation->addItem("90deg CW");

    connect(findChild<QAction *>("action_apply_all"), &QAction::triggered,
            std::bind(&MainWindow::exportConfig, this, VEIKK_MP_ALL));
}

MainWindow::~MainWindow() {
    delete ui;
}

// resize elements on startup, see: https://stackoverflow.com/questions/9858971
void MainWindow::showEvent(QShowEvent *evt) {
    pressureCurveView->fitInView(pressureCurveView->sceneRect());
    screenMapView->fitInView(screenMapView->sceneRect(), Qt::KeepAspectRatio);
    QWidget::showEvent(evt);
}

void MainWindow::resizeEvent(QResizeEvent *evt) {
    screenMapView->fitInView(screenMapView->sceneRect(), Qt::KeepAspectRatio);
    QWidget::resizeEvent(evt);
}

void MainWindow::getPressureCoefs(qint16 *coefs) {
    qint8 i;
    for(i=0; i<4; i++)
        coefs[i] = qint16(pressureCoefSpinboxes[i]->value()*100);
}
QRect MainWindow::getScreenMapParms() {
    return QRect{
        screenMapXSpinBox->value(),
        screenMapYSpinBox->value(),
        screenMapWidthSpinBox->value(),
        screenMapHeightSpinBox->value()
    };
}
// get configuration options in format ready to export directly to the driver
QString MainWindow::getExportFormat(ModparmType type) {
    QRect screenSizeRect, screenMapRect;
    qint16 pressureCoefs[4];

    switch(type) {
    case VEIKK_MP_ORIENTATION:
        return QString::number(quint32(screenOrientation->currentIndex()));
    case VEIKK_MP_SCREEN_SIZE:
        screenSizeRect = screen->geometry();
        return QString::number((quint32(screenSizeRect.width())<<16)
                             | quint16(screenSizeRect.height()));
    case VEIKK_MP_SCREEN_MAP:
        screenMapRect = getScreenMapParms();
        return QString::number((quint64(quint16(screenMapRect.x()))<<48)
                             | (quint64(quint16(screenMapRect.y()))<<32)
                             | (quint64(quint16(screenMapRect.width()))<<16)
                             | quint16(screenMapRect.height()));
    case VEIKK_MP_PRESSURE_MAP:
        getPressureCoefs(pressureCoefs);
        return QString::number((quint64(quint16(pressureCoefs[3]))<<48)
                             | (quint64(quint16(pressureCoefs[2]))<<32)
                             | (quint64(quint16(pressureCoefs[1]))<<16)
                             | quint16(pressureCoefs[0]));
    case VEIKK_MP_ALL:
        return "";
    }
}

int MainWindow::setSysfsModparm(QString parmName, QString value) {
    const QString baseUrl = "/sys/module/veikk/parameters/";
    QFile parmFile{baseUrl + parmName};

    if(!parmFile.open(QIODevice::WriteOnly|QIODevice::Text))
        return errno;
    if(parmFile.write(value.toLocal8Bit().constData())<0)
        return errno;
    parmFile.close();
    return 0;
}

void MainWindow::screenSizeChanged(QRect newScreenSize) {
    screenWidthLineEdit->setText(QString::number(newScreenSize.width()));
    screenHeightLineEdit->setText(QString::number(newScreenSize.height()));

    // fitInView() only works if sceneRect is within scene's sceneRect,
    // so resize scene's sceneRect first
    screenMapView->scene()->setSceneRect(screen->geometry());
    screenMapView->fitInView(screenMapView->scene()->sceneRect());
}

void MainWindow::tabChanged(int curTab) {
    switch(curTab) {
    case 0: // screen map
        screenMapView->fitInView(screenMapView->sceneRect(),
                                 Qt::KeepAspectRatio);
        break;
    case 1: // pressure map
        pressureCurveView->fitInView(pressureCurveView->sceneRect());
        break;
    }
}

void MainWindow::updatePressureForm(qint16 *newCoefs) {
    qint8 i;
    for(i=0; i<4; i++) {
        pressureCoefSpinboxes[i]->blockSignals(true);
        pressureCoefSpinboxes[i]->setValue(newCoefs[i]/100.0);
        pressureCoefSpinboxes[i]->blockSignals(false);
    }
}

void MainWindow::updatePressureCoefs() {
    qint16 newCoefs[4];
    getPressureCoefs(newCoefs);
    emit updatePressureCurve(newCoefs);
}

void MainWindow::updateScreenMapForm(QRect newScreenMap) {
    qint8 i;
    for(i=0; i<4; i++)
        screenMapSpinboxes[i]->blockSignals(true);
    screenMapXSpinBox->setValue(newScreenMap.x());
    screenMapYSpinBox->setValue(newScreenMap.y());
    screenMapWidthSpinBox->setValue(newScreenMap.width());
    screenMapHeightSpinBox->setValue(newScreenMap.height());
    for(i=0; i<4; i++)
        screenMapSpinboxes[i]->blockSignals(false);
    screenDefaultMap->setCheckState(newScreenMap==screen->geometry()
                                    ? Qt::Checked
                                    : Qt::Unchecked);
}

void MainWindow::updateScreenMapParms() {
    QRect newScreenMap = getScreenMapParms();
    screenDefaultMap->setCheckState(newScreenMap==screen->geometry()
                                    ? Qt::Checked
                                    : Qt::Unchecked);
    emit updateScreenMapRect(newScreenMap);
}

void MainWindow::setDefaultScreenMap(int checkState) {
    if(checkState == Qt::Unchecked)
        return;
    updateScreenMapForm(screen->geometry());
    emit updateScreenMapRect(screen->geometry());
}

void MainWindow::exportConfig(ModparmType type) {
    qint32 ret=0;
    QLabel *errLabel;
    if(type==VEIKK_MP_ORIENTATION || type==VEIKK_MP_ALL)
        ret = setSysfsModparm("orientation",
                              getExportFormat(VEIKK_MP_ORIENTATION));
    if(!ret && (type==VEIKK_MP_SCREEN_SIZE || type==VEIKK_MP_ALL))
        ret = setSysfsModparm("screen_size",
                              getExportFormat(VEIKK_MP_SCREEN_SIZE));
    if(!ret && (type==VEIKK_MP_SCREEN_MAP || type==VEIKK_MP_ALL))
        ret = setSysfsModparm("screen_map",
                              getExportFormat(VEIKK_MP_SCREEN_MAP));
    if(!ret && (type==VEIKK_MP_PRESSURE_MAP || type==VEIKK_MP_ALL))
        ret = setSysfsModparm("pressure_map",
                              getExportFormat(VEIKK_MP_PRESSURE_MAP));

    // TODO: better error handling
    if(ret) {
        errLabel = new QLabel{strerror(ret)};
        errLabel->show();
    }
}

void MainWindow::exportConfigToFile(QString &dest) {
    // TODO
}
